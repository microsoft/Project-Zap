@{
    @using Microsoft.AspNetCore.Authorization
    @using Microsoft.AspNetCore.Mvc.Localization

    @inject IViewLocalizer Localizer
    @inject IAuthorizationService AuthorizationService
}


@model Project.Zap.Models.SearchShiftViewModel

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
          integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
          crossorigin="" />


<h1 class="mb-3">@Localizer["Title"]</h1>

@if (ViewData.ContainsKey("ValidationError"))
{
    <div class="alert alert-danger">
        <strong>@ViewData["ValidationError"]</strong> @ViewData["ValidationError"]
    </div>
}

@if (ViewData.ContainsKey("SuccessMessage"))
{
    <div class="alert alert-success">
        <strong>@Localizer["SuccessTitle"]</strong> @ViewData["SuccessMessage"]
    </div>
}

<div class="container">
    <partial name="Search" model="new Project.Zap.Models.SearchShiftViewModel { LocationNames = Model.LocationNames }" />
</div>

<div id="results">
    <h3 class="mt-3">@Localizer["ResultsTitle"]</h3>

    @if (Model.Result != null)
    {
    <div class="row">
        <div id="myMap" class="mt-2 col-12" style="height:400px"></div>
    </div>
    <div class="row">
        <div class="d-none d-xs-block d-sm-block col-md-4 font-weight-bold mt-2">@Localizer["TableLocation"]</div>
        <div class="d-none d-xs-block d-sm-block col-md-2 font-weight-bold mt-2">@Localizer["TableStart"]</div>
        <div class="d-none d-xs-block d-sm-block col-md-2 font-weight-bold mt-2">@Localizer["TableEnd"]</div>
        <div class="d-none d-xs-block d-sm-block col-md-2 font-weight-bold mt-2">@Localizer["TableWorkType"]</div>
        <div class="d-none d-xs-block d-sm-block col-md-1 font-weight-bold mt-2">@Localizer["TableAvailable"]</div>
        @if ((await AuthorizationService.AuthorizeAsync(User, "OrgAManager")).Succeeded)
            {
        <div class="d-none d-xs-block d-sm-block col-md-1 font-weight-bold mt-2 invisible">@Localizer["TableView"]</div>
            }
        @if ((await AuthorizationService.AuthorizeAsync(User, "OrgBEmployee")).Succeeded)
            {
        <div class="d-none d-xs-block d-sm-block col-md-1 font-weight-bold mt-2 invisible">@Localizer["TableBook"]</div>
            }
    </div>
    @foreach (var shift in Model.Result)
        {
    <div class="row">
        <div class="d-block d-xs-none d-sm-none col-xs-6 col-sm-6 font-weight-bold mt-2">@Localizer["TableStore"]</div>
        <div class="col-xs-6 col-sm-6 col-md-4 my-auto">@shift.LocationName</div>
    
        <div class="d-block d-xs-none d-sm-none col-xs-6 col-sm-6 font-weight-bold mt-2">@Localizer["TableStart"]</div>
        <div class="col-xs-6 col-sm-6 col-md-2 my-auto">@shift.Start.ToString("MM/dd/yyyy HH:mm")</div>
    
        <div class="d-block d-xs-none d-sm-none col-xs-6 col-sm-6 font-weight-bold mt-2">@Localizer["TableEnd"]</div>
        <div class="col-xs-6 col-sm-6 col-md-2 my-auto">@shift.End.ToString("MM/dd/yyyy HH:mm")</div>
    
    
        <div class="d-block d-xs-none d-sm-none col-xs-6 col-sm-6 font-weight-bold mt-2">@Localizer["TableWorkType"]</div>
        <div class="col-xs-6 col-sm-6 col-md-2 my-auto">@shift.WorkType</div>
    
        <div class="d-block d-xs-none d-sm-none col-xs-6 col-sm-6 font-weight-bold mt-2">@Localizer["TableAvailable"]</div>
        <div class="col-xs-6 col-sm-6 col-md-1 my-auto">@shift.Available / @shift.Quantity</div>
        @if ((await AuthorizationService.AuthorizeAsync(User, "OrgAManager")).Succeeded)
                {
        <a class="btn btn-primary col-xs-6 col-sm-6 col-md-1 my-auto" asp-controller="Shifts" asp-action="ViewShift" asp-route-LocationName="@shift.LocationName" asp-route-Start="@shift.Start.ToString("yyyy-MM-ddTHH:mm")" asp-route-End="@shift.End.ToString("yyyy-MM-ddTHH:mm")" asp-route-WorkType="@shift.WorkType" asp-route-Quantity="@shift.Quantity" asp-route-Available="@shift.Available">@Localizer["LinkView"]</a>
                }
        @if ((await AuthorizationService.AuthorizeAsync(User, "OrgBEmployee")).Succeeded)
                {
        <a class="btn btn-primary col-xs-6 col-sm-6 col-md-1 mt-1 mb-1" asp-controller="Shifts" asp-action="Book" asp-route-LocationName="@shift.LocationName" asp-route-Start="@shift.Start.ToString("yyyy-MM-ddTHH:mm")" asp-route-End="@shift.End.ToString("yyyy-MM-ddTHH:mm")" asp-route-WorkType="@shift.WorkType">@Localizer["LinkBook"]</a>
                }
    </div>
        }
    }
</div>

@section Scripts
{
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
            integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
            crossorigin=""></script>

    <script type="text/javascript">
        var map;
        function onLocationFound(e) {
            var radius = e.accuracy / 2;

            L.marker(e.latlng)
                .addTo(map)
                .bindPopup("You are within " + radius + " meters from this point")
                .openPopup();

            L.circle(e.latlng, radius).addTo(map);
        }

        $(function () {
            var subscriptionKey = '@ViewData["AzureMapsKey"]';

            var roads = L.tileLayer('https://atlas.microsoft.com/map/tile?subscription-key={subscriptionKey}&api-version=2.0&tilesetId={tilesetId}&zoom={z}&x={x}&y={y}&tileSize=256&language={language}&view={view}', {
                attribution: '© ' + new Date().getFullYear() + ' Microsoft, © 1992 - ' + new Date().getFullYear() + ' TomTom',
                id: 'azureRoadMaps',
                tilesetId: 'microsoft.base.road',
                language: 'en-US',
                view: 'Auto',
                subscriptionKey: subscriptionKey
            });

            map = L.map('myMap', { layers: [roads] });

            map.locate({ setView: true, enableHighAccuracy: true });
            map.on('locationfound', onLocationFound);

            var baseMaps = {
                "Azure Roads": roads
            };

            L.control.layers(baseMaps, null, { collapsed: false }).addTo(map);

            @foreach(var shift in Model.Result)
            {

                <text>
            var popUpContent = L.Util.template(`
<dl>
    <dt>@Localizer["TableLocation"]</dt>
    <dd>@shift.LocationName</dd>
    <dt>@Localizer["TableStart"]</dt>
    <dd>@shift.Start</dd>
    <dt>@Localizer["TableEnd"]</dt>
    <dd>@shift.End</dd>
    <dt>@Localizer["TableWorkType"]</dt>
    <dd>@shift.WorkType</dd>
</dl>
@if ((await AuthorizationService.AuthorizeAsync(User, "OrgAManager")).Succeeded)
{
    <a class="btn btn-primary text-white" asp-controller="Shifts" asp-action="ViewShift" asp-route-LocationName="@shift.LocationName" asp-route-Start="@shift.Start.ToString("yyyy-MM-ddTHH:mm")" asp-route-End="@shift.End.ToString("yyyy-MM-ddTHH:mm")" asp-route-WorkType="@shift.WorkType" asp-route-Quantity="@shift.Quantity" asp-route-Available="@shift.Available">@Localizer["LinkView"]</a>
}
@if ((await AuthorizationService.AuthorizeAsync(User, "OrgBEmployee")).Succeeded)
{
    <a class="btn btn-primary text-white" asp-controller="Shifts" asp-action="Book" asp-route-LocationName="@shift.LocationName" asp-route-Start="@shift.Start.ToString("yyyy-MM-ddTHH:mm")" asp-route-End="@shift.End.ToString("yyyy-MM-ddTHH:mm")" asp-route-WorkType="@shift.WorkType">@Localizer["LinkBook"]</a>
}`);

                L.marker([@shift.Point.Coordinates[0],@shift.Point.Coordinates[1]])
                    .addTo(map)
                    .bindPopup(popUpContent)
                    .openPopup();

                </text>
            }
        });
    </script>
}